/*
 * Copyright 2008-2013 by 
 * 
 * Laboratoire de l'Informatique du Parall√©lisme, 
 * UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668
 *
 * and by
 *
 * Laboratoire d'Informatique de Paris 6, equipe PEQUAN,
 * UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France.
 *
 * Sollya wrapper scripts for the Remez algorithm in Sollya
 * Implements an algorithm published in the proceedings of the RNC'8 conference
 *
 * Contributor: Christoph Quirin Lauter (ENS Lyon/ UPMC LIP6 PEQUAN) 
 *              christoph.lauter@ens-lyon.org
 *
 * This file is part of the metalibm library developed by the Arenaire
 * project at Ecole Normale Superieure de Lyon and by the equipe PEQUAN
 * at Universite Pierre et Marie Curie Paris 6.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
*/

/* Global variables for the remez and guessdegree caches */

remezCache = [||];
guessdegreeCache = [||];


/* A timing wrapper around dirtyinfnorm */
procedure mydirtyinfnorm(func, dom) {
	  var res, dirtyinfnormtime;
	  var oldpoints;

	  dirtyinfnormtime = 0;
	  
	  oldpoints = points;
	  points = 75!;
	  dirtyinfnormtime = dirtyinfnormtime +
                             time({ 
	                             res = dirtyinfnorm(func, dom);
				  });
	  points = oldpoints!;	  

	  if (res != 0) then {
	      dirtyinfnormtime = dirtyinfnormtime +
                                 time({ 
	                                 res = dirtyinfnorm(func, dom);
		   		      });
	  };
	  wholeDirtyinfnormTime := wholeDirtyinfnormTime + dirtyinfnormtime;
	  
	  return res;
};

/* A timing wrapper around dirtyfindzeros */
procedure mydirtyfindzeros(func, dom) {
	  var res, dirtyfindzerostime;

	  dirtyfindzerostime = time({ 
	                             res = dirtyfindzeros(func, dom);
				  });

	  wholeDirtyfindzerosTime := wholeDirtyfindzerosTime + dirtyfindzerostime;

	  return res;
};

/* Quickly checks if the infinite norm of func 
   in dom is less than target 

   Returns true or false

*/
procedure quickcheckinfnorm(func,dom,target) {
	  var t, b, h, y, maxy;
	  var oldprec;
	  var res;
	  var infn;

	  oldprec = prec = ?;
	  prec = 20!;
	  t = inf(dom);
	  b = sup(dom);
	  h = round((b - t) / 64,12,RU);
	  maxy = 0; 
	  while ((t <= b) && (maxy <= target)) do {
	  	maxy := abs(func(t));
		t = round(t + h,12,RU);
	  };
	  prec = oldprec!;
	  
	  if (maxy > target) then 
	      res = false 
	  else {
	       infn = mydirtyinfnorm(func,dom);
	       if (infn > target) then {
	       	  write("Warning: quickcheckinfnorm decides false case by dirtyinfnorm\n");
	       	  res = false; 
	       } else res = true;
 	  };

	  return res;
};


procedure minimaMaxima(func,dom) {
	var zerosIntRaw, zerosInt, zeros;
	var deriv;	
	var z;
	var minimum, maximum, t;

	deriv = diff(func);
	zerosIntRaw = myfindzeros(deriv,dom);
	zerosInt = [||];
	for z in zerosIntRaw do zerosInt = zerosInt @ (myfindzeros(deriv,z));
	zeros = [||];
	for z in zerosInt do zeros = zeros @ (mydirtyfindzeros(deriv,z));
	zeros = sort(zeros);

	t := func(inf(dom));
	minimum = t;
	maximum = t;
	t := func(sup(dom));
	if (t > maximum) then maximum = t;
	if (t < minimum) then minimum = t;
	
	for z in zeros do {
		t := func(z);
		if (t > maximum) then maximum = t;
		if (t < minimum) then minimum = t;
	};

	return [ minimum; maximum ];
};

/* guessdegreewrapper */
procedure guessdegreewrapper(f,d,eps,w) {
	  var res, guess;
	  var poly;
	  var guessdegreeTime;
	  var oldPoints;

	  oldPoints = points;
	  points = 65!;
	  guessdegreeTime = time({
	                             guess = guessdegree(f,d,eps,w);
	                             if (!(guess == guess)) then {
	                                guess = [1,1];
	                             };
                                 });
	  wholeGuessdegreeTime := wholeGuessdegreeTime + guessdegreeTime;
	  points = oldPoints!;

	  if ((sup(guess) - inf(guess) <= 8) && (sup(guess) - inf(guess) > 4) && (degree(simplifysafe(f/w)) < 0) && (!(0 in evaluate(simplifysafe(f/w), dom)))) then {
	     write("guessdegree has failed on ", f, ", ", d, ", ", eps, ", ", w, " - the result was:", guess, "(prec = ", prec, ", points = ", points,")\n");
	     res = sup(guess);
	     poly = remezbugreport(f,res,d,w,eps,0.1);
	     while ((poly != false) && quickcheckinfnorm(poly * w - f,d,eps)) do {
	     	   res := res - 1;
	     	   poly = remezbugreport(f,res,d,w,eps,0.1);		   
	     };
	     if (poly == false) then res = inf(guess);
	  } else
	    res = inf(guess);

	  return res;
};

/* guessdegreewrapperwithboundinner */
procedure guessdegreewrapperwithboundinner(f,d,eps,w,b) {
	  var res, guess;
	  var poly;
	  var guessdegreeTime;
	  var oldPoints;

	  oldPoints = points;
	  points = 65!;
	  guessdegreeTime = time({
	                             guess = guessdegree(f,d,eps,w,b);
	                             if (!(guess == guess)) then {
	                                guess = [1,1];
	                             };
                                 });

          "guessdegree(",f,",",d,",",eps,",",w,",",b,") = ", guess;

	  wholeGuessdegreeTime := wholeGuessdegreeTime + guessdegreeTime;
	  points = oldPoints!;

	  if ((sup(guess) != infty) && (sup(guess) - inf(guess) <= 8) && (sup(guess) - inf(guess) > 4) && (degree(simplifysafe(f/w)) < 0) && (!(0 in evaluate(simplifysafe(f/w), dom)))) then {
	     write("guessdegree has failed on ", f, ", ", d, ", ", eps, ", ", w, " - the result was:", guess, "(prec = ", prec, ", points = ", points,")\n");
	     res = sup(guess);
	     poly = remezbugreport(f,res,d,w,eps,0.1);
	     while ((poly != false) && quickcheckinfnorm(poly * w - f,d,eps)) do {
	     	   res := res - 1;
	     	   poly = remezbugreport(f,res,d,w,eps,0.1);		   
	     };
	     if (poly == false) then res = inf(guess);
	  } else {
	    if (sup(guess) == infty) then {
                res = b + 1;
		if ((res - inf(guess) <= 8) && (res - inf(guess) > 4) && (degree(simplifysafe(f/w)) < 0) && (!(0 in evaluate(simplifysafe(f/w), dom)))) then {
	             write("guessdegree has failed on ", f, ", ", d, ", ", eps, ", ", w, " - the result was:", guess, "(prec = ", prec, ", points = ", points,")\n");
	             res = b + 1;
	             poly = remezbugreport(f,res,d,w,eps,0.1);
	             while ((poly != false) && quickcheckinfnorm(poly * w - f,d,eps)) do {
	     	        res := res - 1;
	     	        poly = remezbugreport(f,res,d,w,eps,0.1);		   
	             };
	             if (poly == false) then res = inf(guess);
		};
            } else {
    	        res = ceil(mid(guess));
            };
	  };

	  return res;
};

/* Get a guessdegree computation out of the guessdegree cache */
procedure getGuessdegreeCache(f,dom,eps,w,bounds) {
	  var key;
	  var res;
	  var cacheList, hd;
	  var found;

	  res = { .okay = false };

	  key = { .f = f, .dom = dom, .eps = eps, .w = w, .bounds = bounds };

	  cacheList = guessdegreeCache;
	  found = false;
	  while ((cacheList != [||]) && (!found)) do {
	  	hd = head(cacheList);
		cacheList = tail(cacheList);
		
		if (hd.key == key) then {
		   res.okay = true;
		   res.res = hd.res;
		   found = true;
		};
	  };

	  return res;
};

procedure insertGuessdegreeCache(res,f,dom,eps,w,bounds) {
	  var key;
	  var entry;

	  key = { .f = f, .dom = dom, .eps = eps, .w = w, .bounds = bounds };
	  entry = { .res = res, .key = key };

	  guessdegreeCache = entry .: guessdegreeCache;
};

procedure guessdegreewrapperwithbound(f,d,eps,w,b) {
	  var cacheRes, res;

	  cacheRes = getGuessdegreeCache(f,d,eps,w,b);
	  if (cacheRes.okay) then {
	     "Using a cached guessdegree result for guessdegreewrapperwithbound(",f,",", d, ",", eps,",", w, ",", b,")";
	     res = cacheRes.res;
          } else { 
	     res = guessdegreewrapperwithboundinner(f,d,eps,w,b);
	     insertGuessdegreeCache(res,f,d,eps,w,b);
	  };

	  return res;
};

/* Get a remez computation out of the remez cache */
procedure getRemezCache(f,m,dom,w,qual,bounds) {
	  var key;
	  var res;
	  var cacheList, hd;
	  var found;

	  res = { .okay = false };

	  key = { .f = f, .m = m, .dom = dom, .w = w, .qual = qual, .bounds = bounds };

	  cacheList = remezCache;
	  found = false;
	  while ((cacheList != [||]) && (!found)) do {
	  	hd = head(cacheList);
		cacheList = tail(cacheList);
		
		if (hd.key == key) then {
		   res.okay = true;
		   res.res = hd.res;
		   found = true;
		};
	  };

	  return res;
};

procedure insertRemezCache(res,f,m,dom,w,qual,bounds) {
	  var key;
	  var entry;

	  key = { .f = f, .m = m, .dom = dom, .w = w, .qual = qual, .bounds = bounds };
	  entry = { .res = res, .key = key };

	  remezCache = entry .: remezCache;
};

procedure myremezinterpolate(X, Y, phis) {
	  var res, lx, ly, lphis, l, c, recXA, recYA, recXB, recYB, recPhis;
	  var resA, resB, pA, pB, p, xA, xB;

	  res = { .okay = false };
	  lx = length(X);
	  ly = length(Y);
	  lphis = length(phis);
	  if ((lx == ly) && (ly == lphis)) then {
	     l = lx;
	     if (l == 1) then {
		c = Y[0] / (substitute(phis[0],X[0]));
		res.okay = true;
		res.poly = horner(c * (phis[0]));
	     } else {
	        t = simplify(phis[l-1]/phis[l-2]);
		recXA = tail(X);
		recYA = tail(Y);
		recXB = revert(tail(revert(X)));
		recYB = revert(tail(revert(Y)));
		recPhis = revert(tail(revert(phis)));
		xA = X[0];
		xB = X[l-1];
		resA = myremezinterpolate(recXA, recYA, recPhis);
		if (resA.okay) then {
		     resB = myremezinterpolate(recXB, recYB, recPhis);
		     if (resB.okay) then {
		     	pA = resA.poly;
			pB = resB.poly;
			p = 1/(substitute(t, xA - xB)) * (
                                                            substitute(t, xA - x) * pA + 
							    substitute(t, x - xB) * pB
                                                         );
		     	res.okay = true;
			res.poly = horner(p);
		     };
		};
	     };
	  };

	  return res;
};

procedure myremezbase(f, m, d, eps) {
	  var res;
	  var X, Y;
	  var n;
	  var i;
	  var xi, yi;
	  var a, b;
	  var phis, phi;
	  var oldPrec;
	  var resA;

	  res = { .okay = false };
	  oldPrec = prec;
	  prec = ceil(-log2(eps) + 10)!;
	  n = length(m) - 1;
	  a = inf(dom);
	  b = sup(dom);
	  X = [||];
	  Y = [||];
	  phis = [||];
	  for i from 0 to n do {
	      xi := 1/2 * (a + b) + 1/2 * (b - a) * cos(pi * ((2 * i + 1)/(2 * (n + 1))));
	      yi := f(xi);
	      if (m[i] == 0) then { phi = 1; } else { phi = simplify(x^(m[i])); };
	      X = xi .: X;
	      Y = yi .: Y;
	      phis = phi .: phis;
	  }; 
	  X = revert(X);
	  Y = revert(Y);
	  phis = revert(phis);
	  prec = 2 * prec!;
	  resA = myremezinterpolate(X, Y, phis);
	  if (resA.okay) then {
	     res.okay = true;
	     res.poly = subpoly(resA.poly, m);
	  };
	  prec=oldPrec!;
	  return res;
};

procedure myremezalternate(f, m, d, eps) {
	  var res;
	  var firstMonomial, myM, mon, myFunc, myRes;

	  res = { .okay = false };
	  if (m != [||]) then {
	     firstMonomial = m[0];
	     if (firstMonomial > 0) then {
	     	myM = [||];
		for mon in m do {
		    myM = (simplify(mon - firstMonomial)) .: myM;
		};
		myM = revert(myM);
		myFunc = simplify(f/(x^firstMonomial));
		myRes = myremez(myFunc, myM, d, eps);
		if (myRes.okay) then {
		   res.okay = true;
		   res.poly = simplify((x^firstMonomial) * myRes.poly);
		};
	     } else {
	        if (inf(evaluate(f, inf(dom)) * evaluate(f, sup(dom))) > 0) then {
	     	   res = myremezbase(f, m, d, eps);
	        };
	     };
	  };
	  return res;
};

// myremez = myremezalternate;

/* remezbugreport */
procedure remezbugreport(f,m,d,w,eps,qual) {
	  var res;
	  var oldpoints;
	  var oldprec;
	  var oldverb;
	  var myDom;
	  var func, isAList, y;
	  var oldDisplay;
	  var remezTime;
	  var myM;
	  var cacheRes, bound, targetPrec;
	  var haveAnswer, myremezres; 

	  myDom = d;
	  if ((inf(d) == 0) || (sup(d) == 0)) then {
	     isAList = false;
	     match (m) with a @ [||] : { isAList = true; }
                            default : { };
             if (isAList) then {
	     	if (m[0] != 0) then {
		   func = simplifysafe(f/w);
		   y = evaluate(func,[0]);
		   if (0 in y) then {
		      if (inf(myDom) == 0) then {
		      	 myDom = [ 1b-1074; sup(myDom) ];
		      };
		      if (sup(myDom) == 0) then {
		      	 myDom = [ inf(myDom); -1b-1074 ];
		      };
		   };
	     	};
             };
	  };

	  myM = m;
	  match (m) with a @ [||] : { }
          	         default  : { myM = [| 0, ..., m |]; };
	  

	  bound = [abs(eps)/4;abs(eps)];

	  cacheRes = getRemezCache(f,myM,myDom,w,qual,bound);
	  if (cacheRes.okay) then {
	     "Using a cached remez approximation polynomial";
	     res = cacheRes.res;
          } else { 
	     oldpoints = points = ?;
	     points = max(65, 4 * max(myM))!;
	     oldprec = prec = ?;
	     if (abs(eps) > 0) then {
	     	targetPrec = ceil(-log2(abs(eps))) + 10;
	     } else {
	        targetPrec = 12;
	     };	     
	     prec = min(300, max(ceil(1.5 * prec), targetPrec))!;
	     oldverb = verbosity = ?;
	     verbosity = 1!;

	     res = false;

	     oldDisplay = display;
	     display = dyadic!;
	     write("Remez debugging: prec = ",prec,"; points = ",points,"; remez(",f,",",myM,",",myDom,",",w,",",qual,",",bound,");", " targetErr = ", eps,";\n"); 
	     display = oldDisplay!;

	     haveAnswer = false;
	     if (isbound(myremez)) then {
	     	myremezres = myremez(simplify(f/w), myM, myDom, abs(eps));
		if (myremezres.okay) then {
		   res = myremezres.poly;
		   haveAnswer = true;
		};
	     };

	     if (!haveAnswer) then {
	         remezTime = time({
                         	  res = remez(f,myM,myDom,w,qual,bound);
	                          if (!(res == res)) then res = false;
		                  });
	         "Remez debugging: remez took ", round(remezTime,12,RN), " sec.";
	         wholeRemezTime := wholeRemezTime + remezTime;
	     };

	     verbosity = oldverb!;
	     points = oldpoints!;
	     prec = oldprec!;

	     insertRemezCache(res,f,myM,myDom,w,qual,bound);
          };

	  return res;
};


/* legacyremezorfail

   Returns an approximation polynomial or false 

   Uses symetries if possible

*/
procedure legacyremezorfail(func,dom,monomials,eps) {
	  var poly, poly2;
	  var d, symetrical, i, firstmonomial;
	  var deg;

	  deg = degree(func);

	  if ((deg > 0) && (deg <= monomials[length(monomials) - 1])) then {

	     poly = func;
	  
	  } else {	  

	    symetrical = true;
	    i := length(monomials) - 1;
	    firstmonomial = head(monomials);
	    while ((i >= 0) && symetrical) do {
	  	if (floor((monomials[i] + firstmonomial) / 2) * 2 != (monomials[i] + firstmonomial)) then 
		   symetrical = false;
		i := i - 1;
	    };
	    if (symetrical) then {
	       if (-inf(dom) > sup(dom)) then 
		  d = [1b-1075, -inf(dom)]
	       else 
		  d = [1b-1075, sup(dom)];
	    } else {
	       d = dom;
	    };

	    poly = false;
	    poly = remezbugreport(1,monomials,d,1/func,eps,2621b-19);
	    if (symetrical) then {
	          poly2 = false;
	          poly2 = remezbugreport(1,monomials,[-sup(d);-inf(d)],1/func,eps,2621b-19);
		  if (poly2 != false) then {
		     if (mydirtyinfnorm(poly2/func - 1, dom) < mydirtyinfnorm(poly/func - 1, dom)) then {
		        poly = poly2;
		     };
		  };
		  if ((poly == false) && (poly2 != false)) then poly = poly2;
	    };
	  };

	  return poly;
};

procedure checkZeroConstantCache(data, X, n, p) {
	  var res;

	  res = { .okay = false };
	  if (isbound(zeroConstantCache)) then {
	     if ((zeroConstantCache.data == data) &&
	         (zeroConstantCache.X == X) &&
		 (zeroConstantCache.n == n) &&
		 (zeroConstantCache.p >= p)) then {
		 res = { .okay = true; .res = zeroConstantCache.res };
             };
	  };
	  
	  return res;
};

procedure insertZeroConstantCache(data, X, n, p, res) {
	  zeroConstantCache = { .data = data, .X = X, .n = n, .p = p, .res = res };
};

maxZeroPrec = 1200;

procedure makeZeroConstant(func, dom) {
	  var res, oldPrec, oldPoints, oldVerb;
	  var zeros, z, myDom, zd, zu;
	  var constantevaluateprocedure;
	  var f, c, delta, y;

	  oldPrec = prec;
	  oldPoints = points;
	  prec = 160!;
	  points = default!;
	  zeros = dirtyfindzeros(func, dom);
	  if (zeros == [||]) then {
	     res = NaN;
	  } else {
	     z = zeros[0];
	     y = simplify(func(z));
	     if (y == 0) then {
	         res = z;
	     } else {
	         zd = min(z * (1 - 2^(-prec+4)), z * (1 + 2^(-prec+4)));
	         zu = max(z * (1 - 2^(-prec+4)), z * (1 + 2^(-prec+4)));
	         myDom = [max(inf(dom), zd); min(sup(dom), zu)];
	         zeros = dirtyfindzeros(func, myDom);
	         if (zeros == [||]) then {
	     	    myDom = dom;
	         };	     
	         constantevaluateprocedure = proc(data, X, n, p) {
	            var res, oldPrec, oldPoints, zeros, z, zd, zu, resCache, oldVerb;
	            if (n == 0) then {
                       if (p > maxZeroPrec) then {
		       	  write("Refusing to evaluate a zero at more than ", maxZeroPrec, " bits\n");
			  p = maxZeroPrec;
		       };
		       resCache = checkZeroConstantCache(data, X, n, p);
		       if (resCache.okay) then {
		       	  res = resCache.res;
		       } else {
		          write("Evaluating constant for data = ", data, " on X = ", X, " and p = ", p, " ----->\n");
	                  oldPrec = prec;
		          oldPoints = points;
			  oldVerb = verbosity;
	                  prec = p + 10!;
		          points = 5!;
			  verbosity = 1!;
	                  zeros = dirtyfindzeros(data.func,data.dom);
		          if (zeros == [||]) then {
		       	     res = [NaN];
		          } else {
                             z = zeros[0];
	                     zd = min(z * (1 - 2^(-prec+2)), z * (1 + 2^(-prec+2)));
	                     zu = max(z * (1 - 2^(-prec+2)), z * (1 + 2^(-prec+2)));
			     res = [ round(zd, p, RD); round(zu, p, RU) ];
			     if (!(0 in (data.func)(res))) then {
			        res = [NaN];
			     };
		          };
	                  prec = oldPrec!;
		          points = oldPoints!;
			  insertZeroConstantCache(data, X, n, p, res);
		          write("------> DONE\n");
			  verbosity = oldVerb!;
                       };
	            } else {
	               res = [0];
	            };
	            return res;
	         };
	         f = function(bind(constantevaluateprocedure, data, { .func = func, .dom = myDom }));
	         res = f(min(sup(dom),max(inf(dom),round(mid(dom),12,RN))));
	         prec = oldPrec * 1.25!;
	         c := res;
	         delta = [res - c];
	         prec = oldPrec * 1.25!;
	         f = annotatefunction(f, c, dom, delta);
	         res = f(min(sup(dom),max(inf(dom),round(mid(dom),12,RN))));
             };
	  };
	  prec = oldPrec!;
	  points = oldPoints!;

	  return res;
};

procedure tryAddAnnotationFunctionByX(func, dom) {
	  var deriv, myDom, poly, coeffErrors, Delta, DeltaCoeff, i;
	  var antiDerivPolyByX, res, oldPrec, oldAutosimplify, funcByX, annotatedFunc;

	  res = { .okay = false };
	  if (0 in dom) then {
	      write("Trying to add an annotation for function ", func, " divided by x over ", dom, "\n");
	      oldPrec = prec;
	      prec = 2 * prec!;
	      deriv = diff(func);
	      myDom = [max(inf(dom),-1b-45);min(sup(dom),1b-45)];
	      tf = taylorform(deriv, 5, 0, myDom, absolute);
	      poly = tf[0];
	      coeffErrors = tf[1];
	      Delta = tf[2];
	      DeltaCoeff = [0];
	      for i from length(coeffErrors)-1 to 0 by -1 do {
	          DeltaCoeff = DeltaCoeff * myDom + (coeffErrors[i]);
	      };
	      DeltaGlobal = Delta + DeltaCoeff;
	      antiDerivPolyByX = 0;
	      for i from 0 to degree(poly) do {
	         antiDerivPolyByX = antiDerivPolyByX + (coeff(poly, i) / (i + 1)) * x^i;
	      };
	      antiDerivPolyByX = horner(antiDerivPolyByX);
	      prec = oldPrec!;
	      funcByX = simplify(func/x);	
	      oldAutosimplify = autosimplify;
	      autosimplify = off!;
	      annotatedFunc = annotatefunction(funcByX, antiDerivPolyByX, myDom, DeltaGlobal);
	      autosimplify = oldAutosimplify!;
	      "Annotation done: p = ", antiDerivPolyByX, ", Delta = ", DeltaGlobal, ", domain = ", myDom;
	      res = { .okay = true, .func = annotatedFunc };
	  };

	  return res;
};

procedure remezorfail(func,dom,monomials,eps) {
	  var res;
	  var yDom, yZero, okay, zeros;
	  var c, shiftedFunc, shiftedDom;
	  var shiftedRes, shiftedMonomials, m, i, h;
	  var oldAutosimplify, shiftedFuncByX, resAnnot;

	  yDom = evaluate(func, dom);
	  if (0 in yDom) then {
	    if (0 in dom) then {
	       yZero = evaluate(func, [0]);
	       if ((inf(yZero) <= 0) && (sup(yZero) >= 0)) then {
	       	 okay = true;
	       } else {
	       	 okay = false;
	       };
	    } else {
	       okay = false;
	    };
	  } else {
	    okay = true;
	  };
	  if (!okay) then {
	     zeros = mydirtyfindzeros(func, dom);
	     lzeros = length(zeros);
	     if ((lzeros == 0) || (lzeros >= 2)) then {
	     	okay = true;
	     };
	  };

	  if (okay) then {
	       res = legacyremezorfail(func,dom,monomials,eps);
          } else {
	       c = makeZeroConstant(func, dom);
	       if ([c] == [c]) then {
	       	    shiftedFunc = horner(func(x + c));
		    shiftedDom = dom - c;
		    shiftedFunc = annotatefunction(shiftedFunc, 0, [0], [0]);
		    resAnnot = tryAddAnnotationFunctionByX(shiftedFunc, shiftedDom);
		    if (resAnnot.okay) then {
		         shiftedFuncByX = resAnnot.func;
		         oldAutosimplify = autosimplify;
		         autosimplify = off!;
		         shiftedFunc = annotatefunction(shiftedFunc, x * shiftedFuncByX, shiftedDom, [0]);
			 shiftedFunc = simplify(shiftedFunc);
		         autosimplify = oldAutosimplify!;
                    };
		    secondDerivShiftedFunc = simplify(diff(diff(shiftedFunc)));
		    h = simplify(diff(simplify(shiftedFunc / secondDerivShiftedFunc)));
		    if (h == 0) then {
		        write("Information: second derivative of shifted function has a zero at zero as well as the function itself.\n");
			secondDerivShiftedFunc = annotatefunction(secondDerivShiftedFunc, 0, [0], [0]);
	            };
		    if (match (monomials) with 
                              a @ [||] : (true)
                              default  : (false)) then {
		      shiftedMonomials = [||];
		      for m in monomials do {
		      	  if (m != 0) then {
			     shiftedMonomials = m .: shiftedMonomials;
			  };
		      };
		      shiftedMonomials = revert(shiftedMonomials);
		      if (shiftedMonomials == [||]) then {
		      	 shiftedMonomials = [| 1 |];
		      };
	            } else {
		      if (monomials >= 1) then {
		        shiftedMonomials = [| 1, ..., monomials |];
		      } else {
		      	shiftedMonomials = [| 1 |];
		      };		      
		    };
                    shiftedRes = legacyremezorfail(shiftedFunc,shiftedDom,shiftedMonomials,eps);
		    if (shiftedRes != false) then {
		       p = shiftedRes(x - c);
		       q = 0;
		       for i from 0 to degree(p) do {
		       	   q = q + x^i * round(coeff(p,i),2 * prec + 10,RN);
		       };
		       q = horner(q);
		       if (match (monomials) with 
                                   a @ [||] : (true)
                                   default  : (false)) then {
	                  res = subpoly(q, monomials);
                       } else {
		          res = q;
		       };
		    } else {
		       res = legacyremezorfail(func,dom,monomials,eps);
		    };
	       } else {
                    res = legacyremezorfail(func,dom,monomials,eps);
	       };
	  };

	  return res;
};


procedure simpleRemezWrapper(func, dom, targetErr, iterations) {
	  var y, guess, noConstantTerm, err, deg, k;
	  var res;

	  if (0 in dom) then {
	      y = evaluate(func, 0);
	  } else {
              y = evaluate(func, [mid(dom)]);
	  };
	  if ((inf(y) <= 0) && (sup(y) >= 0)) then {
	     { guess = guessdegreewrapper(1,dom,abs(targetErr),x/func); };
	     guess = guess + 1;
	     noConstantTerm = true;
	  } else {
	     { guess = guessdegreewrapper(1,dom,abs(targetErr),1/func); };
	     noConstantTerm = false;
	  };
	
	  err = 1b1000;
	  deg = guess - 1;
	  if (deg < 0) then deg = 0;
	  k = 0;
	  while ((abs(err) > abs(targetErr)) && (k <= iterations)) do {
	     deg := deg + 1;
	     if (noConstantTerm) then 
	     	monomials = [|1,...,deg|]
	     else 
	     	monomials = [|0,...,deg|];
	     poly = remezorfail(func,dom,monomials,targetErr);
	     if (poly != false) then {
	     	err = mydirtyinfnorm(poly/func-1,dom);
	     };
	     k := k + 1;
	  };

	  if (abs(err) <= abs(targetErr)) then 
		res = poly
	  else 
		res = false;

	  return res;
};


/* remezwrapper 

   Computes an approximation polynomial of smallest degree possible
   better than or equal to a target error respecting implementation 
   constraints (Horner evaluation).

   Returns the found polynomial
   Returns false if no polynomial has been found in iterations iterations

*/

procedure remezwrapper(func, dom, targetErr, iterations) {
	  var guess, y, i, deg;
	  var poly, err, noConstantTerm;
	  var monomials;
	  var revMonomials, subPolyDeg, subPolyDone, correctMonomials, i, g, alpha;
	  var poly2;
	  var k;
	  var res;
	  var uncorrectpoly;
	  var minmax;
	  var samesign;
	  var uncorrecterr;
	  var errR;
	  var infnormPoly;
	  var special, nocancel;
	  var temp;
	  var lastcoeff;
	  var r, q, nrm, gamma, targetDelta, nrmQ, nrmP;
	  var firstremezpoly, firstremezpolyerr, firstremezpolyfound;
	  var ci;

	  firstremezpolyfound = false;

	  if (0 in dom) then {
	      y = evaluate(func, 0);
	  } else {
              y = evaluate(func, [mid(dom)]);	
	  };
	  if ((inf(y) <= 0) && (sup(y) >= 0)) then {
	     { guess = guessdegreewrapper(1,dom,abs(targetErr),x/func); };
	     guess = guess + 1;
	     noConstantTerm = true;
	  } else {
	     { guess = guessdegreewrapper(1,dom,abs(targetErr),1/func); };
	     noConstantTerm = false;
	  };
	
	  err = 1b1000;
	  deg = guess - 1;
	  if (deg < 0) then deg = 0;
	  k = 0;
	  while ((abs(err) > abs(targetErr)) && (k <= iterations)) do {
	     deg := deg + 1;
	     if (noConstantTerm) then 
	     	monomials = [|1,...,deg|]
	     else 
	     	monomials = [|0,...,deg|];
	     poly = remezorfail(func,dom,monomials,targetErr);
	     if (poly != false) then {
	     	err = mydirtyinfnorm(poly/func-1,dom);
	     };
	     k := k + 1;
	  };

	  if (abs(err) <= abs(targetErr)) then {
		  write("\t\tcurrent remez polynomial error: 2^(",round(log2(abs(err)),12,RN),")\n");
		  firstremezpoly = poly;
		  firstremezpolyerr = err;
		  firstremezpolyfound = true;
	  	  k = 0;
		  uncorrecterr = err;
		  err = 1b1000;
	  	  while ((abs(err) > abs(targetErr)) && (k <= iterations)) do {
		  	revMonomials = revert(monomials);
			subPolyDeg = [|head(revMonomials)|];
			subPolyDone = coeff(poly,head(revMonomials));
			correctMonomials = [|head(revMonomials)|];
			revMonomials = tail(revMonomials);
			infnormPoly = mydirtyinfnorm(poly,dom);			
			if ((mydirtyfindzeros(poly,dom) == [||]) && (degree(poly) > 0)) then {
			  gamma = 1/(degree(poly) * 2 * mydirtyinfnorm(1/poly, dom));
			} else {
			  gamma = 0;
			};
			while (revMonomials != [||]) do {
			      i = head(revMonomials);
			      ci = coeff(poly,i);
			      if (ci == 0) then {
			      	 ci = 1b-1075;
			      };
			      g = (x * subPolyDone) / ci;
			      alpha = mydirtyinfnorm(g,dom);
			      
		              samesign = false; nocancel = false; absoluteAuthorized = false;
			      if (alpha > 0.5) then {
				minmax = minimaMaxima(x * subPolyDone,dom);	
				samesign = ((inf(minmax) * sup(minmax) > 0) && (inf(minmax) * coeff(poly,i) > 0));
				temp = minimaMaxima(g,dom);
				nocancel = (inf(temp) > -0.5);
				if (nocancel) then {
				   write("\t\tCase of impossible cancellation by asymmetric subpolynomial addition detected on coefficient ", i, "\n");
				};

				if (!nocancel) then {
				   if (i > 0) then {
				        q = subpoly(poly, [| i ... |]);
				        nrm = mydirtyinfnorm(q/poly, dom);
				        if (nrm > 0) then {
					   if (abs(targetErr)/nrm > 1b-52) then {
					       if (i == degree(poly) - 1) then {
					           absoluteAuthorized = true;
                                                   write("\t\tCase of possible cancellation authorized because in double precision range on coefficient ", i, " and an absolute error bound suffices\n");                   
					       } else {
					           targetDelta = abs(targetErr) * gamma;
					           r = subpoly(poly, [| (i + 1) ... |]);
					           nrmP = mydirtyinfnorm(r, dom);
					           nrmQ = mydirtyinfnorm(r * x, dom);
					           if (nrmP > 0) then {
					               if (abs(nrmQ * abs(targetErr)/nrmP) < abs(targetDelta)) then {
					       	          absoluteAuthorized = true;
                                                          write("\t\tCase of possible cancellation authorized because in double precision range on coefficient ", i, " and an absolute error bound suffices\n");
					               };
					           };
                                               };
					   };
				        };
				   };
				};

			      };	

			      special = (alpha > 0.5) && (alpha < 1) && 
			                (abs(targetErr) / abs(coeff(poly,i) * alpha / infnormPoly) * 1b52 >= abs(1 - alpha)) && 
			                (abs(targetErr) / abs(coeff(poly,i) * alpha / infnormPoly) >= 1b-52);

			      lastcoeff = (i == 0) && (coeff(poly,i) != 0);

			      if (special) then write("\t\tCase of possible cancellation authorized because in double precision range on coefficient ", i, "\n");

			      if ((samesign) || ((alpha <= 0.5) || special) || nocancel || lastcoeff || absoluteAuthorized) then {
				 correctMonomials = i.:correctMonomials;
				 subPolyDone = coeff(poly,i) + x * subPolyDone;
			      	 subPolyDeg = i.:subPolyDeg;
			      } else {
			         subPolyDone = x * subPolyDone;
			      };
			      revMonomials = tail(revMonomials);
			};

			uncorrectpoly = poly; 
			poly = subpoly(poly,correctMonomials);
			err = mydirtyinfnorm(poly/func - 1, dom);
			write("\t\tcurrent implem. polynomial error: 2^(",round(log2(abs(err)),12,RN),")\n");
			if (abs(err) > abs(targetErr)) then {
		   	   poly = remezorfail(func,dom,correctMonomials,targetErr);
		   	   if (poly != false) then {
		      	      errR = mydirtyinfnorm(poly/func - 1, dom);
			      if (abs(errR) > abs(err)) then {
			      	 write("Warning: Remez on incomplete base worse than force-and-round\n");
			      };
			      err = errR;
			      write("\t\tcurrent implem. polynomial error: 2^(",round(log2(abs(err)),12,RN),")\n");	
			      /* write("Found implementable polynomial with error at 2^(",round(log2(err),12,RN),")\n"); */
		   	   };
			};				

			// round(log2(err),12,RN), round(log2(uncorrecterr),12,RN);

			if (abs(err) > abs(targetErr)) then {
		   	   k := k + 1;
		   	   monomials = monomials:.(simplifysafe(head(revert(monomials)) + 1));
		   	   poly2 = remezorfail(func,dom,monomials,targetErr);
		   	   if (poly2 != false) then {
		      	      poly = poly2;
		      	      err = mydirtyinfnorm(poly/func - 1, dom);
		              uncorrecterr = err;
			      write("\t\tcurrent remez polynomial error: 2^(",round(log2(abs(err)),12,RN),")\n"); 
		   	   } else {
		     	      write("Warning: remez failed on func = ",func,", dom = ",dom,", monomials = ",monomials,"\n");
			      k := iterations + 1;
		   	   };
			   if (abs(err) > abs(targetErr)) then {
			      write("Warning: must use polynomial that is difficult to implement.\n");	
			      poly = uncorrectpoly;
			      err = mydirtyinfnorm(poly/func - 1, dom);
			   } else {
	                     uncorrecterr = err;
			     err = 1b1000;
			   };
			};				
	  	  };
          };
	  
	  if (abs(err) <= abs(targetErr)) then {
	     res = poly;
	  } else {
	     if ((abs(targetErr) > 1b-51) && firstremezpolyfound) then {
               write("Warning: using a polynomial that might be pretty hard to implement.\n");	
	       res = firstremezpoly;
	     } else {
	       res = false;
             };
	  };

	  return res;	  
};






