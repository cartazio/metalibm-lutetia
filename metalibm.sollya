#!/usr/bin/env sollya
/*
 * Copyright 2008-2014 by 
 * 
 * Laboratoire de l'Informatique du ParallÃ©lisme, 
 * UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668
 *
 * and by
 *
 * Laboratoire d'Informatique de Paris 6, equipe PEQUAN,
 * UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France.
 *
 * Sollya metalibm main exploitation script for implementing functions 
 *
 * Contributor: Christoph Quirin Lauter (ENS Lyon/ UPMC LIP6 PEQUAN) 
 *              christoph.lauter@ens-lyon.org
 *
 * This file is part of the metalibm library developed by the Arenaire
 * project at Ecole Normale Superieure de Lyon and by the equipe PEQUAN
 * at Universite Pierre et Marie Curie Paris 6.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
*/

roundingwarnings=off!;
prec = 350!;
verbosity = 1!;
showmessagenumbers=on!;
display = default!;

/* -------------------------------------------------------- 
   Compile the externally bound code.
----------------------------------------------------------- */ 
write("Recompiling externally bound parts of Metalibm.\n");
bashexecute("make");
write("Metalibm ready to run.\n\n");

/* -------------------------------------------------------- 
   Use free mathematical variable x
----------------------------------------------------------- */ 
__identity = x;

/* -------------------------------------------------------- 
   Suppress some unneeded (noisy) messages
----------------------------------------------------------- */ 

suppressmessage(158, 372, 162, 175, 231, 346, 228, 247, 404);

/* -------------------------------------------------------- 
   Initialize performance counters
----------------------------------------------------------- */ 

wholeRemezTime = 0;
wholeGuessdegreeTime = 0;
wholeGappaTime = 0;
wholeDirtyinfnormTime = 0;
wholeDirtyfindzerosTime = 0;

/* --------------------------------------------------------
   Read in configuration
----------------------------------------------------------- */ 

execute("config.sollya");

/* --------------------------------------------------------
   Load implementer
----------------------------------------------------------- */ 

execute("implement.sollya");

/* --------------------------------------------------------
   Read in problem to implement 
----------------------------------------------------------- */ 

argvAccessOkay = false;
if (!isbound(__argv)) then {
  argvAccessOkay = false;
} else {
  if ((!(__argv == __argv)) && (!(__argv != __argv))) then {
     argvAccessOkay = false;
  } else {
     argvAccessOkay = true;
  }; 
};

if (!argvAccessOkay) then {
   problemDefFile = "problemdef.sollya";
} else {
  if (__argv == [||]) then {
    problemDefFile = "problemdef.sollya";
  } else {
    problemDefFile = __argv[0];
  }; 
};
execute(problemDefFile);	

/* -------------------------------------------------------- 
   Put additional configuration data here
----------------------------------------------------------- */ 

variableFormat = D;

doplots = true;
dotiming = true;
savetiming = true;
timingsavefile = "timing.sollya";

iterations = 1b12;	

trim = 1/2;

polynomialName = "f_approx";
gappaOutputTmpFile = "gappaOutput.sollya";
compiledCode = "implementation.so";
compileFlags = "-DASSEMBLY_TIMING=1";

gappaExecutable = "gappa";

/* -------------------------------------------------------- 
   Modifiy the implementation and Gappa file name 
   if we have a unique id.
----------------------------------------------------------- */ 
uniqueIdAccessOkay = false;
if (!isbound(__unique_id)) then {
  uniqueIdAccessOkay = false;
} else {
  if ((!(__unique_id == __unique_id)) && (!(__unique_id != __unique_id))) then {
     uniqueIdAccessOkay = false;
  } else {
     uniqueIdAccessOkay = true;
  }; 
};

if (uniqueIdAccessOkay) then {
   implementationFile = implementationFile @ "-" @ __unique_id @ ".c";
   gappaFile = gappaFile @ "-" @ __unique_id @ ".gappa";
   gappaOutputTmpFile = gappaOutputTmpFile @ "-" @ __unique_id @ ".out";
   compiledCode = compiledCode @ "-" @ __unique_id @ ".so";
};

/* -------------------------------------------------------- 
   Some adaptions due to the problem definition
----------------------------------------------------------- */ 

if (adaptWorkingPrecision) then {
   prec = max(25, min(350, ~(ceil(-log2(abs(target))) + 10)))!;
   write("Adapted working precision: prec = ", prec, "\n");
};

/* -------------------------------------------------------- 
   Print out problem configuration 
----------------------------------------------------------- */ 

if ((variableFormat == TD) && (target > 1b-103)) then { print("Warning: reduced format of variable"); variableFormat = DD; };
if ((variableFormat == DD) && (target > 1b-52)) then { print("Warning: reduced format of variable"); variableFormat = D; };

write("Using problem definition file: ", problemDefFile, "\n");
write("The function to be implemented is: ",f,"\n");
write("The domain is: ",dom,"\n");
write("The target error is ",target," = 2^(",round(log2(abs(target)),12,RN),")\n");
write("The maximum degree is; ", maxDegree, "\n");
write("The implementation goes into file: ", implementationFile, "\n");
write("The Gappa base file name is: ", gappaFile, "\n");
write("\n");

/* -------------------------------------------------------- 
   Launch implementer
----------------------------------------------------------- */ 

problemdef.func = f;
problemdef.dom = dom;
problemdef.target = trim * target;
problemdef.variableFormat = variableFormat;

parametrization.maxDegree = maxDegree;
parametrization.minWidth = minWidth;
parametrization.metaSplitMinWidth = metaSplitMinWidth;
parametrization.tableIndexWidth = tableIndexWidth;
parametrization.beta = trim + trim + trim * trim;
parametrization.implementationFile = implementationFile;
parametrization.gappaFile = gappaFile;
parametrization.gappaOutputFile = gappaOutputTmpFile;
parametrization.gappaExecutable = gappaExecutable;
parametrization.functionBasename = polynomialName;
parametrization.minimalReductionRatio = minimalReductionRatio;
parametrization.performExpressionDecomposition = performExpressionDecomposition;
parametrization.maxDegreeReconstruction = maxDegreeReconstruction;
//parametrization.printdebug = printdebug;

implementationTime = time({
		   resultat = tryImplementationExternal(problemdef, parametrization);
		   });

/* -------------------------------------------------------- 
   Print out results of the implementer, do timing and plotting
----------------------------------------------------------- */ 

write("\n");

if (resultat.okay) then {
   write("Yippie! Everything worked fine.\n");
   write("\nThe implementation can be found in file: ", implementationFile, "\n\n");
} else {
   write("There has been some error. Check it out!\n");
};

write("Implementation took ", 
      nearestint(implementationTime), " sec. out of which ", 
      nearestint(wholeRemezTime), " sec. were spent on remez (",nearestint(wholeRemezTime/implementationTime * 100),"%), ",
      nearestint(wholeGuessdegreeTime), " sec. were spent on guessdegree (",nearestint(wholeGuessdegreeTime/implementationTime * 100),"%), ",
      nearestint(wholeGappaTime), " sec. were spent on Gappa (",nearestint(wholeGappaTime/implementationTime * 100),"%), ",
      nearestint(wholeDirtyinfnormTime), " sec. were spent on dirtyinfnorm (",nearestint(wholeDirtyinfnormTime/implementationTime * 100),"%) and ",
      nearestint(wholeDirtyfindzerosTime), " sec. were spent on dirtyfindzeros (",nearestint(wholeDirtyfindzerosTime/implementationTime * 100),"%)\n");

if (compilePath == "") then {
   compilePath = bashevaluate("pwd");
};

compilepath = compilePath;
if compilepath[length(compilepath)-1] != "/" then compilepath = compilepath @ "/";

if (resultat.okay) then {
   
   match (resultat) with 
         { .poly = default } : {
                                  write("The implemented polynomial is:\n\t");
                                  printexpansion(resultat.poly);
                               }
         default :             { 
                                  write("Argument reduction code implies use of more than one polynomial\n");
                               };
   
   if (variableFormat == D) then
	signature = "D_TO_"
   else
	if (variableFormat == DD) then
		signature = "DD_TO_"
	else 
		signature = "TD_TO_";
		
   signature = signature @ (match resultat.outputformat with 
                                  D       : ("D") 
                                  DD      : ("DD")
                                  TD      : ("TD")
                                  default : ("")); 

   bashexecute(compilepath@"compile.sh "@compilepath@" "@implementationFile@" "@signature@" "@resultat.functionname@" "@compiledCode@" "@compileFlags);


   if (doplots) then {
      externalplotPrecision = 18;
      match (resultat) with 
            { .centerpoint = default } : {
                                             match (resultat) with 
                                                   { .poly = default } : {
                                 	                                     plot(resultat.poly/f(x + resultat.centerpoint) - 1, [inf(dom) - resultat.centerpoint; sup(dom) - resultat.centerpoint]);	    
                                                                         }
                                                   default :             {
                                                                             write("Argument reduction code implies use of more than one polynomial\n");
                                                                         };
                                             match (resultat) with 
                                                   { .poly = default, 
                                                     .pstar = default } : {
                                 	                                     plot(resultat.poly/f(x + resultat.centerpoint) - 1,resultat.pstar/f(x + resultat.centerpoint) - 1, [inf(dom) - resultat.centerpoint; sup(dom) - resultat.centerpoint]);	    
                                                                         }
                                                   default :             {
                                                                             write("Argument reduction code implies use of more than one polynomial and pstar\n");
                                                                         };
                                             match (resultat) with 
                                                   { .pstar = default } : {
                                					     plot(resultat.pstar/f(x + resultat.centerpoint) - 1, [inf(dom) - resultat.centerpoint; sup(dom) - resultat.centerpoint]);	    
                                                                         }
                                                   default :             {
                                                                             write("Argument reduction code implies use of more than one pstar\n");
                                                                         };

                                             if (resultat.centerpoint == 0) then externalplotPrecision = 12;
                                             if (0 in dom) then externalplotPrecision = 14;
                                             match (resultat) with 
                                                   { .poly = default } : {
								             oldPrec = prec; prec = 165!;
                                                                             externalplot(compilepath@compiledCode,relative,resultat.poly(x - resultat.centerpoint),dom,externalplotPrecision,perturb);
                                                                             prec = oldPrec!;
                                                                         }
                                                   default :             {
                                                                             write("Argument reduction code implies use of more than one polynomial\n");
                                                                         };
                                         }
            default :                    {
                                             write("Argument reduction code implies use of more than one centerpoint\n");
                                         };
       
       if (0 in dom) then externalplotPrecision = 14;
       oldPrec = prec; prec = 165!;
       externalplot(compilepath@compiledCode,relative,f,dom,externalplotPrecision,perturb); 
       prec = oldPrec!;
   };

   if (dotiming) then {

        externalproc(timefunc, compilepath@compiledCode, (constant, constant, integer, integer) -> integer);

	evaltime = round(timefunc(inf(dom), sup(dom), 4000, iterations) / iterations, 12, RN);

	print("Time needed for evaluating the polynomial implemented:", evaltime,"time units");

	if (savetiming) then write(evaltime) > timingsavefile;

   };

   bashexecute("rm " @ compilepath@compiledCode);

};
