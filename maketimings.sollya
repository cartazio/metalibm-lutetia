/*
 * Copyright 2008-2013 by
 *
 * Laboratoire de l'Informatique du ParallÃ©lisme,
 * UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668
 *
 * and by
 *
 * Laboratoire d'Informatique de Paris 6, equipe PEQUAN,
 * UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France.
 * 
 * Sollya script for running the metalibm implementer script on 
 * a list of examples
 *
 * Contributor: Christoph Quirin Lauter (UPMC) -- christoph.lauter@lip6.fr
 *
 * This file is part of the metalibm library developed by the Arenaire
 * project at Ecole Normale Superieure de Lyon
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
*/

execute("config.sollya");

problemdefFile = "problemdef.sollya";

timingsavefile = "timing.sollya";
timingOutputFile = "overalltimings.sollya";



f = exp(x);

minMaxDegree = 3;
maxMaxDegree = 15;

minTableIndexWidth = 3;
maxTableIndexWidth = 12;



write("\n") > timingOutputFile;

for tableIndexWidth from minTableIndexWidth to maxTableIndexWidth do {

    for maxDegree from minMaxDegree to maxMaxDegree do {

    	write("\n\n\n");
	for i from 1 to 80 do write("-");
    	write("\n");

    	bashexecute("rm -f implementation.c implementer.output "@timingsavefile@" "@sollyaPath@"/implementation.so");
	write("") > timingsavefile;

    	write("\n") > problemdefFile;
    	write("f = ", f, ";\n") >> problemdefFile;
    	write("dom = [-75; 75];\n") >> problemdefFile;
    	write("target = 1b-60;\n") >> problemdefFile;
    	write("maxDegree = ", maxDegree, ";\n") >> problemdefFile;
    	write("minWidth = (sup(dom) - inf(dom)) * 1/512;\n") >> problemdefFile;
    	write("tableIndexWidth = ", tableIndexWidth, ";\n") >> problemdefFile;
    	write("minimalReductionRatio = 1000;\n") >> problemdefFile;
    	write("metaSplitMinWidth = (sup(dom) - inf(dom)) * 1/128;\n") >> problemdefFile;
    	write("performExpressionDecomposition = false;\n") >> problemdefFile;

    	bashexecute(sollyaPath@"sollya implementer.sollya");

	temp = readfile(timingsavefile);
    	if (temp != "") then {
	   evaltime = parse(temp); 

    	   write(tableIndexWidth, ", ", maxDegree, ", ", evaltime,"\n") >> timingOutputFile;
	};

    };
};


